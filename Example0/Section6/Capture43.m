//
//  Capture43.m
//  Example0
//
//  Created by lmg on 2018/10/19.
//  Copyright © 2018 lmg. All rights reserved.
//

#import "Capture43.h"

@implementation Capture43
/*
 GCD和操作队列的差异：
 1.GCD是纯C的API，而操作队列则是Objective-C的对象，在GCD中，任务用快来表示，而块是个轻量级数据结构。与之相反，操作则是个重量级的Objective-C对象。虽说如此，GCD却并非总是最佳方案。有时候采用对象所带来的开销微乎其微，使用完整对象所带来的好处反而大大超过其缺点。
 
 使用NSOperation及NSoperationQueue的好处如下：
 1.取消某个操作。如果使用操作队列，那么想要取消操作是很容易的。运行任务之前，可以在NSOperation对象上调用cancle方法，该方法会设置对象内的标志位，用以表明此任务不需要执行，不过，已经启动的任务无法取消。若是不使用操作队列，而是把块安排到GCD队列，那就无法取消了。那套架构是“安排好任务之后就不管了”。开发者自己在应用程序层自己来实现取消功能，不过这样做需要编写很多代码，而那些代码其实已经由操作队列自己实现好了。
 2.指定操作间的依赖关系。
 3.通过键值观测机制来监控NSOperation对象的属性。NSOperation有许多属性都适合键值观测机制来监听，isCancelled来判断任务是否取消，isFinished属性来判断任务是否已完成。如果想在某个任务状态变更时得到通知，或是想用比GCD更为精细的方式来控制所要执行的任务，那么键值观测机制会更有用。

 4.指定操作的优先级。操作的优先级表示此操作与队列中其他操作之间的优先关系。优先级高的操作先执行，优先级低的后执行。GCD并没有直接实现此功能的办法，GCD的操作虽然有优先级，不过那是针对整个队列来说的，而不是针对某个块来说的。因此，在优先级这一点上，操作队列所提供的功能要比GCD更为便利。
 
 5.重用NSOperation对象
 
 
 
 -----------------------------------------------------------------
 //总结
 -----------------------------------------------------------------
 1.在解决多线程与任务管理问题时，派发队列并非唯一方案。
 2.操作队列提供了一套高层的Objective-C API，能实现纯GCD所具备的接大部分功能，而且还能完成一些更为复杂的操作，那些操作若改用GCD来实现，则需另外编写代码。
 
 
 */
@end
