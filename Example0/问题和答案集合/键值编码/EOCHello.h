//
//  EOCHello.h
//  Example0
//
//  Created by lmg on 2019/4/11.
//  Copyright © 2019 lmg. All rights reserved.
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@interface EOCHello : NSObject

@property NSString *greeting;

@end

NS_ASSUME_NONNULL_END
/*
 键值编码（KVC）可以通过名称（key）间接访问对象的属性，而无须使用访问方法支持实例变量。
 键值观察（KVO）能够使对象在其他对象的属性发生更改时获得通知。
 
 与标准的属性访问方法相比，KVC有什么好处：
 1.基于配置的属性访问。通过KVC可以使用由参数驱动的通用API访问属性。
 2.降低耦合性。通过KVC访问属性可以降低各个软件组件之间的耦合性，从而提高软件的可维护性。
 3.简化代码。通过KVC可以减少代码量。
 
 非正式协议NSKeyValueCoding
 
 KVC通过依赖于属性方法命名约定的一系列搜索模式，以setValue:name forKey为例
 1.先搜索setName:的访问方法
 2.寻找名称匹配_name,_isName,name,isName的实例变量。
 3.如果找到了匹配的访问方法或者实例变量，setValue:name forKey方法就会被用于设置值。如有必要，该值会被封装。
 4.如果没有找到适当的访问方法或者实例变量，接受对象的setValue:forUndefinedKey:就会被调用.
 
 键值检验：
 validateValue检验设置的对象值是否合法。
 
 键值编码的集合操作符：
 
 键值观察（KVO）是一种通知机制，它使对象能够在其他对象的属性发生更改时获得通知。是对观察者设计模式的一种实现
 
 键值编码要点：
 1.通过键值编码可以通过名称（Key）间接访问和操作对象的属性，而无需通过访问方法或者属性的支持实例变量。
 2.通过键值编码可以使用能够在程序运行时变化的字符串访问属性，这位访问和操作对象状态提供了
 更为动态而灵活的方式。其主要优点包括降低耦合度，能够执行基于配置的属性访问操作和简化代码。
 3.键值编码使用键和键路径访问属性。键是用于表示指定属性的字符串。键路径指示了对象的属性序列，用于标识指定属性的遍历路径。KVC API支持对一个对象中的一个或多个属性进行访问。属性的类型可以为基元，C语言数据结构和对象类型（包括集合）,Objective-C会使用相应的对象类型，自动封装和解封基元和C语言结构。
 4.非正式协议NSKeyValueCoding定义了通过名称/键间接访问对象的机制。该协议声明了键值编码API，以及构成这些API的类，实例方法和常量值。使用这些方法可以获取和设置属性值。检验属性值，以及为了获取属性值改变键值编码方法的默认行为。
 5.键值编码使用了一种机制。该机制将键与相应的属性访问方法或属性支持变量对应起来。这种机制提供了一系列依赖于属性访问方法命名约定的标准搜索模式。
 6.键值编码还有检验属性值的基础设施。KVC检验机制由一系列API和自定义属性检验方法标准约定构成。可以直接调用KVC检验方法，也可以间接调用KVC检验方法。
 7.使用键值编码集合操作符，可以通过键路径点表达式对集合元素执行操作。
 8.通过键值观察模式可以使对象在其他的对象属性发生变化时获得通知，时机上，它是对观察者设计模式的实现，并且非常多的软件库和框架都实现了它。时机上，它使MVC设计模式的关键组件，而后者是Cocoa和Cocoa Touch框架的核心组件。键值观察以键值编码为基础。
 9.键值观察的优点非常多，其中包括分割观察者和被观察者，提供框架级支持和功能齐全的API集合。
 10.自动属性更改通知功能是由NSObject类中默认实现的KVO代码实现的，手动属性更该通知功能为属性更改通知的发送操作提供了更精细的控制，去除了不必要的操作（如新的属性值与旧的属性值相同时），还能够对通知进行分组。
 11.
 
 
 
 
 
 */
